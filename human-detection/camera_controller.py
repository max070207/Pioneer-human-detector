# camera_controller.py
import cv2
import numpy as np

class CameraController:
    def __init__(self):
        self.drone_connected = False
        self.laptop_camera = None
        self.current_camera_type = "NONE"
        self.init_cameras()

    def init_cameras(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: –¥—Ä–æ–Ω -> –Ω–æ—É—Ç–±—É–∫"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥—Ä–æ–Ω—É
        self.drone_connected = self.init_drone_camera()
        
        if self.drone_connected:
            self.current_camera_type = "DRONE"
            print("‚úÖ –ö–∞–º–µ—Ä–∞ –¥—Ä–æ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            # –ï—Å–ª–∏ –¥—Ä–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–∞–º–µ—Ä—É –Ω–æ—É—Ç–±—É–∫–∞
            self.drone_connected = False
            self.laptop_camera = self.init_laptop_camera()
            
            if self.laptop_camera is not None:
                self.current_camera_type = "LAPTOP"
                print("‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–∞–º–µ—Ä–∞ –Ω–æ—É—Ç–±—É–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                self.current_camera_type = "NONE"
                print("‚ùå –ù–∏ –æ–¥–Ω–∞ –∫–∞–º–µ—Ä–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")

    def init_drone_camera(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã –¥—Ä–æ–Ω–∞"""
        try:
            from pioneer_sdk import Pioneer
            from cam1 import Camera

            self.pioneer = Pioneer(logger=True, log_connection=True)
            self.pioneer_cam = Camera()
            return True

        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥—Ä–æ–Ω–∞: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¥—Ä–æ–Ω—É: {e}")
            return False

    def init_laptop_camera(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–∞–º–µ—Ä—ã –Ω–æ—É—Ç–±—É–∫–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∫–∞–º–µ—Ä (0, 1, 2...)
            for camera_index in [0, 1, 2]:
                cap = cv2.VideoCapture(camera_index)
                if cap.isOpened():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–º–µ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
                    ret, frame = cap.read()
                    if ret and frame is not None:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–∞–º–µ—Ä–∞ (–∏–Ω–¥–µ–∫—Å {camera_index})")
                        return cap
                    else:
                        cap.release()
                else:
                    cap.release()
            
            print("‚ùå –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–∞–º–µ—Ä–∞ –Ω–æ—É—Ç–±—É–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–∞–º–µ—Ä—ã: {e}")
            return None

    def get_frame(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ —Å —Ç–µ–∫—É—â–µ–π –∫–∞–º–µ—Ä—ã"""
        if self.current_camera_type == "DRONE":
            return self.get_drone_frame()
        elif self.current_camera_type == "LAPTOP":
            return self.get_laptop_frame()
        else:
            return self.get_simulation_frame()

    def get_drone_frame(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã –¥—Ä–æ–Ω–∞"""
        try:
            frame = self.pioneer_cam.get_cv_frame()
            if frame is not None and frame.size > 0:
                return True, frame
            else:
                print("‚ö†Ô∏è  –ö–∞–º–µ—Ä–∞ –¥—Ä–æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –Ω–æ—É—Ç–±—É–∫...")
                self.switch_to_laptop_camera()
                return self.get_frame()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –Ω–æ–≤–æ–π –∫–∞–º–µ—Ä—ã
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã –¥—Ä–æ–Ω–∞: {e}, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –Ω–æ—É—Ç–±—É–∫...")
            self.switch_to_laptop_camera()
            return self.get_frame()

    def get_laptop_frame(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–∞–º–µ—Ä—ã –Ω–æ—É—Ç–±—É–∫–∞"""
        try:
            if self.laptop_camera is not None:
                ret, frame = self.laptop_camera.read()
                if ret and frame is not None:
                    return True, frame
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–∞–º–µ—Ä—ã")
                    return False, None
            else:
                return self.get_simulation_frame()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–∞–º–µ—Ä—ã: {e}")
            return self.get_simulation_frame()

    def get_simulation_frame(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–¥—Ä–∞ –µ—Å–ª–∏ –∫–∞–º–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"""
        frame = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
        cv2.putText(frame, "SIMULATION MODE - NO CAMERA", (50, 240),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        cv2.putText(frame, "Press 'q' to exit", (50, 280),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        return True, frame

    def switch_to_laptop_camera(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É –Ω–æ—É—Ç–±—É–∫–∞"""
        if self.current_camera_type == "DRONE":
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –¥—Ä–æ–Ω–æ–º
            try:
                self.pioneer.disarm()
                print("‚úÖ –î—Ä–æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω")
            except:
                pass
            
            self.drone_connected = False
            self.current_camera_type = "LAPTOP"
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –Ω–æ—É—Ç–±—É–∫–∞ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            if self.laptop_camera is None:
                self.laptop_camera = self.init_laptop_camera()
            
            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É –Ω–æ—É—Ç–±—É–∫–∞")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤—Å–µ—Ö –∫–∞–º–µ—Ä"""
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –¥—Ä–æ–Ω–æ–º
        if hasattr(self, 'pioneer'):
            try:
                self.pioneer.disarm()
                print("‚úÖ –î—Ä–æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –¥—Ä–æ–Ω–∞: {e}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É –Ω–æ—É—Ç–±—É–∫–∞
        if self.laptop_camera is not None:
            self.laptop_camera.release()
            print("‚úÖ –ö–∞–º–µ—Ä–∞ –Ω–æ—É—Ç–±—É–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")

        print(f"‚úÖ –†–µ—Å—É—Ä—Å—ã –∫–∞–º–µ—Ä –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å: {self.current_camera_type} –∫–∞–º–µ—Ä–∞")