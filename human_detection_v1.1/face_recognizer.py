# face_recognizer.py
from imports import *
from config import DATABASE_PATH, FACE_RECOGNITION_CONFIG, ASYNC_CONFIG

class FaceRecognizer:
    def __init__(self, file_manager):
        self.file_manager = file_manager
        self.face_database = self.load_face_database()
        self.saved_faces = set()  # –£–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if ASYNC_CONFIG['face_processing']:
            self.processing_thread = None
            self.is_processing = False
            self.latest_frame = None
            self.latest_results = []
            self.processing_lock = threading.Lock()
        else:
            self.processing_thread = None
            
        self.last_processed_frame = 0
        self.processing_interval = 2

    def load_face_database(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ª–∏—Ü"""
        face_database = {}
        if not os.path.exists(DATABASE_PATH):
            print(f"‚ùå –ü–∞–ø–∫–∞ database –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DATABASE_PATH}")
            return face_database
        
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ª–∏—Ü...")
        for filename in os.listdir(DATABASE_PATH):
            if filename.lower().endswith(('.jpg', '.jpeg', '.png')):
                filepath = os.path.join(DATABASE_PATH, filename)
                try:
                    image = face_recognition.load_image_file(filepath)
                    face_encodings = face_recognition.face_encodings(image)
                    if face_encodings:
                        face_database[filename] = face_encodings[0]
                        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ª–∏—Ü–æ: {filename}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –õ–∏—Ü –≤ –±–∞–∑–µ: {len(face_database)}")
        return face_database

    def start_async_processing(self, frame, frame_count):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏—Ü"""
        if not ASYNC_CONFIG['face_processing']:
            return
            
        if frame_count - self.last_processed_frame < self.processing_interval:
            return
            
        if self.is_processing:
            return
            
        self.is_processing = True
        self.latest_frame = frame.copy()
        self.last_processed_frame = frame_count
        
        self.processing_thread = threading.Thread(
            target=self._process_faces_async,
            args=(self.latest_frame, frame_count),
            daemon=True
        )
        self.processing_thread.start()

    def _process_faces_async(self, frame, frame_count):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Ü —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏"""
        try:
            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            
            face_locations = face_recognition.face_locations(
                rgb_frame, 
                model="hog",
                number_of_times_to_upsample=0
            )
            face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)
            
            recognized_persons = []
            new_faces_found = []
            
            for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
                person_name = "Unknown"
                best_match_distance = 1.0
                
                for db_name, db_encoding in self.face_database.items():
                    face_distance = face_recognition.face_distance([db_encoding], face_encoding)[0]
                    if face_distance < FACE_RECOGNITION_CONFIG['tolerance'] and face_distance < best_match_distance:
                        best_match_distance = face_distance
                        person_name = db_name
                
                if person_name != "Unknown":
                    similarity_percent = (1 - best_match_distance) * 100
                    
                    if person_name not in self.saved_faces:
                        print(f"üíæ –°–û–•–†–ê–ù–Ø–Æ –ù–û–í–û–ï –õ–ò–¶–û: {person_name} (—Å—Ö–æ–∂–µ—Å—Ç—å: {similarity_percent:.1f}%)")
                        self.file_manager.save_recognized_face(frame, person_name)
                        self.saved_faces.add(person_name)
                        new_faces_found.append(person_name)
                        
                else:
                    similarity_percent = 0.0
                
                recognized_persons.append((person_name, (top, right, bottom, left), similarity_percent))
            
            if new_faces_found:
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–æ–≤—ã–µ –ª–∏—Ü–∞: {', '.join(new_faces_found)}")
                print(f"üìä –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–∏—Ü: {len(self.saved_faces)}")
            
            with self.processing_lock:
                self.latest_results = recognized_persons
                
        except Exception as e:
            print(f"Face processing error: {e}")
            with self.processing_lock:
                self.latest_results = []
        finally:
            self.is_processing = False

    def get_latest_results(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not ASYNC_CONFIG['face_processing']:
            return []
            
        with self.processing_lock:
            return self.latest_results.copy()

    def process_faces(self, raw_frame, frame_count, is_human_detected):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Ü"""
        if is_human_detected:
            self.start_async_processing(raw_frame, frame_count)
        
        return self.get_latest_results()

    def draw_faces_smooth(self, frame, recognized_persons):
        """–ü–ª–∞–≤–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–∏—Ü –ë–ï–ó —ç–º–æ–¥–∑–∏ –∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏"""
        if not recognized_persons:
            return frame
            
        frame_height, frame_width = frame.shape[:2]
        
        for person_name, (top, right, bottom, left), similarity_percent in recognized_persons:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if (left >= right or top >= bottom or 
                left < 0 or top < 0 or 
                right > frame_width or bottom > frame_height):
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ª–∏—Ü–∞
            face_width = right - left
            face_height = bottom - top
            if face_width < 30 or face_height < 30:
                continue
                
            if person_name != "Unknown":
                # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –∏–º–µ–Ω–∏
                display_name = os.path.splitext(person_name)[0]
                
                if person_name in self.saved_faces:
                    color = (0, 255, 0)  # –ó–µ–ª–µ–Ω—ã–π - —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
                    # –ë–ï–ó —Å–∏–º–≤–æ–ª–æ–≤ - –ø—Ä–æ—Å—Ç–æ –∏–º—è –∏ –ø—Ä–æ—Ü–µ–Ω—Ç
                    label = f"{display_name} ({similarity_percent:.1f}%)"
                else:
                    color = (255, 255, 0)  # –ñ–µ–ª—Ç—ã–π - –Ω–æ–≤–æ–µ –ª–∏—Ü–æ
                    # –ë–ï–ó —Å–∏–º–≤–æ–ª–æ–≤ - –ø—Ä–æ—Å—Ç–æ –∏–º—è –∏ –ø—Ä–æ—Ü–µ–Ω—Ç
                    label = f"{display_name} ({similarity_percent:.1f}%)"
            else:
                color = (0, 0, 255)  # –ö—Ä–∞—Å–Ω—ã–π - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ
                label = "Unknown"
            
            # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            thickness = 2
            cv2.rectangle(frame, (left, top), (right, bottom), color, thickness)
            
            # –§–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            text_bg_top = max(0, top - 25)
            text_bg_bottom = top
            cv2.rectangle(frame, (left, text_bg_top), (right, text_bg_bottom), color, cv2.FILLED)
            
            # –¢–µ–∫—Å—Ç –ë–ï–ó —ç–º–æ–¥–∑–∏
            font = cv2.FONT_HERSHEY_SIMPLEX
            font_scale = 0.4
            
            # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            text_width = cv2.getTextSize(label, font, font_scale, 1)[0][0]
            available_width = right - left - 10
            
            if text_width > available_width and person_name != "Unknown":
                # –°–æ–∫—Ä–∞—â–∞–µ–º –∏–º—è –µ—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è
                max_chars = min(8, len(display_name))
                shortened_name = display_name[:max_chars]
                label = f"{shortened_name} ({similarity_percent:.1f}%)"
            
            text_size = cv2.getTextSize(label, font, font_scale, 1)[0]
            text_x = left + (right - left - text_size[0]) // 2
            text_y = top - 8
            
            cv2.putText(frame, label, (text_x, text_y), font, font_scale, (255, 255, 255), 1)
        
        return frame

    def get_saved_faces_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–∏—Ü"""
        return len(self.saved_faces)

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.processing_thread and self.processing_thread.is_alive():
            self.processing_thread.join(timeout=1.0)